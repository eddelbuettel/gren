
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # paths
> path.code <- as.character(ifelse(Sys.info()[1]=="Darwin", 
+                                  "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/code/" ,
+                                  "~/EBEN/code/"))
> path.graph <- "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/graphs/"
> path.res <- as.character(ifelse(Sys.info()[1]=="Darwin", 
+                                 "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/results/" ,
+                                 "~/EBEN/results/"))
> 
> ### libraries
> library(mvtnorm)
> library(GRridge)
Loading required package: penalized
Loading required package: survival
Welcome to penalized. For extended examples, see vignette("penalized").
Loading required package: Iso
Iso 0.0-17
Loading required package: graph
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:penalized’:

    as.data.frame

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: glmnet
Loading required package: Matrix
Loading required package: foreach
Loaded glmnet 2.0-13


Attaching package: ‘GRridge’

The following object is masked from ‘package:glmnet’:

    auc

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:GRridge’:

    auc, roc

The following object is masked from ‘package:glmnet’:

    auc

The following object is masked from ‘package:BiocGenerics’:

    var

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> 
> ### source grEBEN
> source(paste(path.code, "grVBEM.R", sep=""))
> source(paste(path.code, "mygrridge.R", sep=""))
> 
> ## simulation 2
> set.seed(456)
> # set data characteristics
> n <- 200
> p <- 1000
> G <- 5
> pblock <- 20
> rho <- 0.9
> sigma <- matrix(rho, ncol=pblock, nrow=pblock); diag(sigma) <- 1
> lambda <- 0.02
> alpha <- 0.5
> lambdag <- exp(seq(-1, 1, length.out=G))
> m <- rep(1, n)
> part.greben <- list(groups=rep(1:G, each=p/G))
> part.grridge <- list(groups=CreatePartition(as.factor(part.greben$groups)))
[1] "Summary of group sizes:"
  1   2   3   4   5 
200 200 200 200 200 
> ntest <- 1000
> 
> methods <- c("enet1", "enet2", "enet3")
> nreps <- 50
> auc2 <- list(vector(mode="list", length=nreps), 
+              vector(mode="list", length=nreps), 
+              vector(mode="list", length=nreps))
> names(auc2) <- methods
> briers2 <- list(vector(mode="list", length=nreps), 
+                 vector(mode="list", length=nreps), 
+                 vector(mode="list", length=nreps))
> names(briers2) <- methods
> varbeta2 <- matrix(nrow=nreps, ncol=G)
> # the simulations
> for(r in 1:nreps) {
+   
+   x <- do.call(cbind, replicate(p/pblock, rmvnorm(n, mean=rep(0, pblock), sigma=sigma), 
+                                 simplify=FALSE))
+   beta <- as.numeric(sapply(1:G, function(g) {
+     renbeta(p/G, 2*n*lambda*alpha*sqrt(lambdag[g]), n*lambda*(1 - alpha)*lambdag[g])}))
+   prob <- as.numeric(exp(x %*% beta)/(1 + exp(x %*% beta)))
+   y <- rbinom(n, 1, prob)
+   
+   xtest <- do.call(cbind, replicate(p/pblock, rmvnorm(ntest, mean=rep(0, pblock),
+                                                       sigma=sigma), simplify=FALSE))
+   probtest <- as.numeric(exp(xtest %*% beta)/(1 + exp(xtest %*% beta)))
+   ytest <- rbinom(ntest, 1, probtest)
+   
+   fit1.greben <- cv.glmnet(x, y, family="binomial", standardize=FALSE, 
+                            alpha=0.05)
+   fit2.greben <- cv.glmnet(x, y, family="binomial", standardize=FALSE, 
+                            alpha=0.5)
+   fit3.greben <- cv.glmnet(x, y, family="binomial", standardize=FALSE,
+                            alpha=0.95)
+   
+   auc1.enet <- sapply(fit1.greben$lambda, function(l) {
+     pred <- as.numeric(predict(fit1.greben, xtest, s=l, type="response"))
+     pROC::roc(ytest, pred)$auc})
+   auc2.enet <- sapply(fit2.greben$lambda, function(l) {
+     pred <- as.numeric(predict(fit2.greben, xtest, s=l, type="response"))
+     pROC::roc(ytest, pred)$auc})
+   auc3.enet <- sapply(fit3.greben$lambda, function(l) {
+     pred <- as.numeric(predict(fit3.greben, xtest, s=l, type="response"))
+     pROC::roc(ytest, pred)$auc})
+   
+   briers1.enet <- sapply(fit1.greben$lambda, function(l) {
+     pred <- as.numeric(predict(fit1.greben, xtest, s=l, type="response"))
+     1 - sum((ytest - pred)^2)/sum((ytest - mean(ytest))^2)})
+   briers2.enet <- sapply(fit2.greben$lambda, function(l) {
+     pred <- as.numeric(predict(fit2.greben, xtest, s=l, type="response"))
+     1 - sum((ytest - pred)^2)/sum((ytest - mean(ytest))^2)})
+   briers3.enet <- sapply(fit3.greben$lambda, function(l) {
+     pred <- as.numeric(predict(fit3.greben, xtest, s=l, type="response"))
+     1 - sum((ytest - pred)^2)/sum((ytest - mean(ytest))^2)})
+   
+   psel1.enet <- fit1.greben$nzero
+   psel2.enet <- fit2.greben$nzero
+   psel3.enet <- fit3.greben$nzero
+   
+   auc2[[1]][[r]] <- cbind(psel=psel1.enet, auc=auc1.enet)
+   auc2[[2]][[r]] <- cbind(psel=psel2.enet, auc=auc2.enet)
+   auc2[[3]][[r]] <- cbind(psel=psel3.enet, auc=auc3.enet)
+   
+   briers2[[1]][[r]] <- cbind(psel=psel1.enet, auc=briers1.enet)
+   briers2[[2]][[r]] <- cbind(psel=psel2.enet, auc=briers2.enet)
+   briers2[[3]][[r]] <- cbind(psel=psel3.enet, auc=briers3.enet)
+   
+   varbeta2[r, ] <- sapply(1:G, function(g) {var(beta[(p*(g - 1)/G + 1):(p*g/G)])})
+   
+   results2 <- list(auc=auc2, briers=briers2, varbeta=varbeta2)
+   
+   save(results2, file=paste(path.res, "tukey_test_res.Rdata", sep=""))
+ 
+ }
> 
> # load(paste(path.res, "tukey_test_res.Rdata", sep=""))
> 
> proc.time()
   user  system elapsed 
790.472  65.228 855.841 
