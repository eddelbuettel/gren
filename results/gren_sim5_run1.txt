/bin/bash: warning: setlocale: LC_ALL: cannot change locale (UTF-8)

R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning messages:
1: Setting LC_CTYPE failed, using "C" 
2: Setting LC_COLLATE failed, using "C" 
3: Setting LC_TIME failed, using "C" 
4: Setting LC_MESSAGES failed, using "C" 
5: Setting LC_MONETARY failed, using "C" 
6: Setting LC_PAPER failed, using "C" 
7: Setting LC_MEASUREMENT failed, using "C" 
> path.res <- ifelse(as.character(Sys.info()[1])!="Darwin", "~/EBEN/results/",
+                    "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/results/")
> 
> library(mvtnorm)
> library(gren)
> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: 'pROC'

The following objects are masked from 'package:stats':

    cov, smooth, var

> library(GRridge)
Loading required package: penalized
Loading required package: survival
Welcome to penalized. For extended examples, see vignette("penalized").
Loading required package: Iso
Iso 0.0-17
Loading required package: graph
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from 'package:penalized':

    as.data.frame

The following object is masked from 'package:pROC':

    var

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: glmnet
Loading required package: Matrix
Loading required package: foreach
Loaded glmnet 2.0-16


Attaching package: 'glmnet'

The following object is masked from 'package:pROC':

    auc


Attaching package: 'GRridge'

The following object is masked from 'package:glmnet':

    auc

The following objects are masked from 'package:pROC':

    auc, roc

> library(grpreg)
> library(SGL)
> library(irr)
Loading required package: lpSolve
> 
> ##################### scenario 5
> n <- 100
> p <- 1000
> ntest <- 1000
> 
> G <- 10
> rho <- 0.5
> Sigma <- diag(p)
> for(i in 1:p) {
+   for(j in 1:p) {
+     Sigma[i, j] <- rho^abs(i - j)
+   }
+ }
> 
> beta.group <- c(rep(0, 8), 0.2, 0.5)
> q.zero <- 0.85
> 
> part1 <- rep(c(1:G), each=p/G)
> csel <- c(seq(1, 8, 1), seq(10, 20, 2), seq(25, 60, 5), seq(70, 140, 10))
> nreps <- 100
> psel5 <- kappa5 <- list(grridge=vector("list", nreps),
+                         enet1=vector("list", nreps),
+                         enet2=vector("list", nreps),
+                         enet3=vector("list", nreps),
+                         gren1=vector("list", nreps),
+                         gren2=vector("list", nreps),
+                         gren3=vector("list", nreps),
+                         sglasso1=vector("list", nreps),
+                         sglasso2=vector("list", nreps),
+                         sglasso3=vector("list", nreps),
+                         cmcp1=vector("list", nreps),
+                         cmcp2=vector("list", nreps),
+                         cmcp3=vector("list", nreps),
+                         gelasso1=vector("list", nreps),
+                         gelasso2=vector("list", nreps),
+                         gelasso3=vector("list", nreps))
> auc5 <- mse5 <- briers5 <- list(ridge=numeric(nreps),
+                                 grridge=vector("list", nreps),
+                                 enet1=vector("list", nreps),
+                                 enet2=vector("list", nreps),
+                                 enet3=vector("list", nreps),
+                                 gren1=vector("list", nreps),
+                                 gren2=vector("list", nreps),
+                                 gren3=vector("list", nreps),
+                                 sglasso1=vector("list", nreps),
+                                 sglasso2=vector("list", nreps),
+                                 sglasso3=vector("list", nreps),
+                                 cmcp1=vector("list", nreps),
+                                 cmcp2=vector("list", nreps),
+                                 cmcp3=vector("list", nreps),
+                                 gelasso1=vector("list", nreps),
+                                 gelasso2=vector("list", nreps),
+                                 gelasso3=vector("list", nreps))
> lambdagest5 <- list(grridge=matrix(NA, nrow=nreps, ncol=G),
+                     gren1=matrix(NA, nrow=nreps, ncol=G),
+                     gren2=matrix(NA, nrow=nreps, ncol=G),
+                     gren3=matrix(NA, nrow=nreps, ncol=G))
> for(r in 1:nreps) {
+   set.seed(2018 + r)
+   print(paste("rep", r))
+   beta <- numeric(p)
+   for(g in 1:G) {
+     beta[((g - 1)*p/G + 1):(g*p/G)] <- rep(beta.group[g], p/G)
+     if(beta.group[g]!=0) {
+       beta[((g - 1)*p/G + 1):((g - 1)*p/G + q.zero*p/G)] <- 0
+     }
+   }
+   
+   x <- rmvnorm(n, mean=rep(0, p), sigma=Sigma)
+   y <- rbinom(n, 1, as.numeric(exp(x %*% beta)/(1 + exp(x %*% beta))))
+   
+   xtest <- rmvnorm(ntest, mean=rep(0, p), sigma=Sigma)
+   ytest <- rbinom(ntest, 1, as.numeric(exp(xtest %*% beta)/
+                                          (1 + exp(xtest %*% beta))))
+   
+   fit5.ridge <- cv.glmnet(x, y, alpha=0, standardize=FALSE)
+   
+   fit5.grridge <- vector("list", length(csel))
+   invisible(capture.output(
+     fit5.grridge[[1]] <- grridge(t(x), y, partitions=list(
+       groups=CreatePartition(as.factor(part1))), selection=TRUE, maxsel=csel[1],
+       trace=FALSE, standardizeX=FALSE)))
+   for(s in 2:length(csel)) {
+     invisible(capture.output(
+       fit5.grridge[[s]] <- grridge(t(x), y, partitions=list(
+         groups=CreatePartition(as.factor(part1))), selection=TRUE,
+         maxsel=csel[s], optl=fit5.grridge[[1]]$optl, trace=FALSE,
+         standardizeX=FALSE)))
+   }
+   
+   fit5.gren1 <- gren(x, y, partitions=list(groups=part1), alpha=0.05,
+                      trace=FALSE)
+   fit5.gren2 <- gren(x, y, partitions=list(groups=part1), alpha=0.5,
+                      trace=FALSE)
+   fit5.gren3 <- gren(x, y, partitions=list(groups=part1), alpha=0.95,
+                      trace=FALSE)
+   
+   fit5.sglasso1 <- SGL(list(x=x, y=y), part1, type="logit", alpha=0.05,
+                        standardize=FALSE, nlam=100)
+   fit5.sglasso2 <- SGL(list(x=x, y=y), part1, type="logit", alpha=0.5,
+                        standardize=FALSE, nlam=100)
+   fit5.sglasso3 <- SGL(list(x=x, y=y), part1, type="logit", alpha=0.95,
+                        standardize=FALSE, nlam=100)
+   
+   fit5.cmcp1 <- grpreg(x, y, part1, penalty="cMCP", alpha=0.05)
+   fit5.cmcp2 <- grpreg(x, y, part1, penalty="cMCP", alpha=0.5)
+   fit5.cmcp3 <- grpreg(x, y, part1, penalty="cMCP", alpha=0.95)
+   
+   fit5.gelasso1 <- grpreg(x, y, part1, penalty="gel", alpha=0.05)
+   fit5.gelasso2 <- grpreg(x, y, part1, penalty="gel", alpha=0.5)
+   fit5.gelasso3 <- grpreg(x, y, part1, penalty="gel", alpha=0.95)
+   
+   pred5.ridge <- as.numeric(predict(fit5.ridge, xtest, "lambda.min"))
+   
+   pred5.grridge <- sapply(fit5.grridge, function(s) {
+     predict.grridge(s, t(xtest))[, 3]})
+   
+   pred5.gren1 <- predict(fit5.gren1, xtest, type="groupreg",
+                          s=fit5.gren1$freq.model$groupreg$lambda)
+   pred5.gren2 <- predict(fit5.gren2, xtest, type="groupreg",
+                          s=fit5.gren2$freq.model$groupreg$lambda)
+   pred5.gren3 <- predict(fit5.gren3, xtest, type="groupreg",
+                          s=fit5.gren3$freq.model$groupreg$lambda)
+   
+   pred5.enet1 <- predict(fit5.gren1, xtest, type="regular",
+                          s=fit5.gren1$freq.model$regular$lambda)
+   pred5.enet2 <- predict(fit5.gren2, xtest, type="regular",
+                          s=fit5.gren2$freq.model$regular$lambda)
+   pred5.enet3 <- predict(fit5.gren3, xtest, type="regular",
+                          s=fit5.gren3$freq.model$regular$lambda)
+   
+   pred5.sglasso1 <- predictSGL(fit5.sglasso1, xtest)
+   pred5.sglasso2 <- predictSGL(fit5.sglasso2, xtest)
+   pred5.sglasso3 <- predictSGL(fit5.sglasso3, xtest)
+   
+   pred5.cmcp1 <- predict(fit5.cmcp1, xtest)
+   pred5.cmcp2 <- predict(fit5.cmcp2, xtest)
+   pred5.cmcp3 <- predict(fit5.cmcp3, xtest)
+   
+   pred5.gelasso1 <- predict(fit5.gelasso1, xtest)
+   pred5.gelasso2 <- predict(fit5.gelasso2, xtest)
+   pred5.gelasso3 <- predict(fit5.gelasso3, xtest)
+   
+   auc5$ridge[r] <- pROC::auc(ytest, pred5.ridge)
+   
+   auc5$grridge[[r]] <- apply(pred5.grridge, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   
+   auc5$gren1[[r]] <- apply(pred5.gren1, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$gren2[[r]] <- apply(pred5.gren2, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$gren3[[r]] <- apply(pred5.gren3, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   
+   auc5$enet1[[r]] <- apply(pred5.enet1, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$enet2[[r]] <- apply(pred5.enet2, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$enet3[[r]] <- apply(pred5.enet3, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   
+   auc5$sglasso1[[r]] <- apply(pred5.sglasso1, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$sglasso2[[r]] <- apply(pred5.sglasso2, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$sglasso3[[r]] <- apply(pred5.sglasso3, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   
+   auc5$cmcp1[[r]] <- apply(pred5.cmcp1, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$cmcp2[[r]] <- apply(pred5.cmcp2, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$cmcp3[[r]] <- apply(pred5.cmcp3, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   
+   auc5$gelasso1[[r]] <- apply(pred5.gelasso1, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$gelasso2[[r]] <- apply(pred5.gelasso2, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   auc5$gelasso3[[r]] <- apply(pred5.gelasso3, 2, function(pred) {
+     pROC::auc(ytest, pred)})
+   
+   const <- sum((ytest - mean(ytest))^2)
+   briers5$ridge[r] <- 1 - sum((ytest - pred5.ridge)^2)/const
+   
+   briers5$grridge[[r]] <- apply(pred5.grridge, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   
+   briers5$gren1[[r]] <- apply(pred5.gren1, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$gren2[[r]] <- apply(pred5.gren2, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$gren3[[r]] <- apply(pred5.gren3, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   
+   briers5$enet1[[r]] <- apply(pred5.enet1, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$enet2[[r]] <- apply(pred5.enet2, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$enet3[[r]] <- apply(pred5.enet3, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   
+   briers5$sglasso1[[r]] <- apply(pred5.sglasso1, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$sglasso2[[r]] <- apply(pred5.sglasso2, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$sglasso3[[r]] <- apply(pred5.sglasso3, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   
+   briers5$cmcp1[[r]] <- apply(pred5.cmcp1, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$cmcp2[[r]] <- apply(pred5.cmcp2, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$cmcp3[[r]] <- apply(pred5.cmcp3, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   
+   briers5$gelasso1[[r]] <- apply(pred5.gelasso1, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$gelasso2[[r]] <- apply(pred5.gelasso2, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   briers5$gelasso3[[r]] <- apply(pred5.gelasso3, 2, function(pred) {
+     1 - sum((ytest - pred)^2)/const})
+   
+   mse5$ridge[r] <- mean((coef(fit5.ridge)[-1] - beta)^2)
+   
+   mse5$grridge[[r]] <- sapply(fit5.grridge, function(s) {
+     mean((replace(rep(0, p), s$resEN$whichEN, s$resEN$betasEN) - beta)^2)})
+   
+   mse5$gren1[[r]] <- apply(fit5.gren1$freq.model$groupreg$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$gren2[[r]] <- apply(fit5.gren2$freq.model$groupreg$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$gren3[[r]] <- apply(fit5.gren3$freq.model$groupreg$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   
+   mse5$enet1[[r]] <- apply(fit5.gren1$freq.model$regular$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$enet2[[r]] <- apply(fit5.gren2$freq.model$regular$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$enet3[[r]] <- apply(fit5.gren3$freq.model$regular$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   
+   mse5$sglasso1[[r]] <- apply(fit5.sglasso1$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$sglasso2[[r]] <- apply(fit5.sglasso2$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$sglasso3[[r]] <- apply(fit5.sglasso3$beta, 2, function(b) {
+     mean((b - beta)^2)})
+   
+   mse5$cmcp1[[r]] <- apply(fit5.cmcp1$beta[-1, ], 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$cmcp2[[r]] <- apply(fit5.cmcp2$beta[-1, ], 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$cmcp3[[r]] <- apply(fit5.cmcp3$beta[-1, ], 2, function(b) {
+     mean((b - beta)^2)})
+   
+   mse5$gelasso1[[r]] <- apply(fit5.gelasso1$beta[-1, ], 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$gelasso2[[r]] <- apply(fit5.gelasso2$beta[-1, ], 2, function(b) {
+     mean((b - beta)^2)})
+   mse5$gelasso3[[r]] <- apply(fit5.gelasso3$beta[-1, ], 2, function(b) {
+     mean((b - beta)^2)})
+   
+   kappa5$grridge[[r]] <- sapply(fit5.grridge, function(s) {
+     kappa2(cbind(beta!=0, replace(rep(FALSE, p), s$resEN$whichEN,
+                                   TRUE)))$value})
+   
+   kappa5$gren1[[r]] <- apply(fit5.gren1$freq.model$groupreg$beta, 2,
+                              function(b) {kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$gren2[[r]] <- apply(fit5.gren2$freq.model$groupreg$beta, 2,
+                              function(b) {kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$gren3[[r]] <- apply(fit5.gren3$freq.model$groupreg$beta, 2,
+                              function(b) {kappa2(cbind(beta!=0, b!=0))$value})
+   
+   kappa5$enet1[[r]] <- apply(fit5.gren1$freq.model$regular$beta, 2,
+                              function(b) {kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$enet2[[r]] <- apply(fit5.gren2$freq.model$regular$beta, 2,
+                              function(b) {kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$enet3[[r]] <- apply(fit5.gren3$freq.model$regular$beta, 2,
+                              function(b) {kappa2(cbind(beta!=0, b!=0))$value})
+   
+   kappa5$sglasso1[[r]] <- apply(fit5.sglasso1$beta, 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$sglasso2[[r]] <- apply(fit5.sglasso2$beta, 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$sglasso3[[r]] <- apply(fit5.sglasso3$beta, 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   
+   kappa5$cmcp1[[r]] <- apply(fit5.cmcp1$beta[-1, ], 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$cmcp2[[r]] <- apply(fit5.cmcp2$beta[-1, ], 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$cmcp3[[r]] <- apply(fit5.cmcp3$beta[-1, ], 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   
+   kappa5$gelasso1[[r]] <- apply(fit5.gelasso1$beta[-1, ], 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$gelasso2[[r]] <- apply(fit5.gelasso2$beta[-1, ], 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   kappa5$gelasso3[[r]] <- apply(fit5.gelasso3$beta[-1, ], 2, function(b) {
+     kappa2(cbind(beta!=0, b!=0))$value})
+   
+   psel5$grridge[[r]] <- sapply(fit5.grridge, function(s) {
+     length(s$resEN$whichEN)})
+   
+   psel5$gren1[[r]] <- fit5.gren1$freq.model$groupreg$df
+   psel5$gren2[[r]] <- fit5.gren2$freq.model$groupreg$df
+   psel5$gren3[[r]] <- fit5.gren3$freq.model$groupreg$df
+   
+   psel5$enet1[[r]] <- fit5.gren1$freq.model$regular$df
+   psel5$enet2[[r]] <- fit5.gren2$freq.model$regular$df
+   psel5$enet3[[r]] <- fit5.gren3$freq.model$regular$df
+   
+   psel5$sglasso1[[r]] <- apply(fit5.sglasso1$beta, 2, function(b) {sum(b!=0)})
+   psel5$sglasso2[[r]] <- apply(fit5.sglasso2$beta, 2, function(b) {sum(b!=0)})
+   psel5$sglasso3[[r]] <- apply(fit5.sglasso3$beta, 2, function(b) {sum(b!=0)})
+   
+   psel5$cmcp1[[r]] <- apply(fit5.cmcp1$beta, 2, function(b) {sum(b!=0)})
+   psel5$cmcp2[[r]] <- apply(fit5.cmcp2$beta, 2, function(b) {sum(b!=0)})
+   psel5$cmcp3[[r]] <- apply(fit5.cmcp3$beta, 2, function(b) {sum(b!=0)})
+   
+   psel5$gelasso1[[r]] <- apply(fit5.gelasso1$beta, 2, function(b) {sum(b!=0)})
+   psel5$gelasso2[[r]] <- apply(fit5.gelasso2$beta, 2, function(b) {sum(b!=0)})
+   psel5$gelasso3[[r]] <- apply(fit5.gelasso3$beta, 2, function(b) {sum(b!=0)})
+   
+   lambdagest5$grridge[r, ] <- fit5.grridge[[1]]$lambdamults$groups
+   lambdagest5$gren1[r, ] <- fit5.gren1$lambdag$groups
+   lambdagest5$gren2[r, ] <- fit5.gren2$lambdag$groups
+   lambdagest5$gren3[r, ] <- fit5.gren3$lambdag$groups
+   
+   results5 <- list(auc=auc5, briers=briers5, mse=mse5, kappa=kappa5, psel=psel5,
+                    lambdag=lambdagest5)
+   save(results5, file=paste(path.res, "gren_sim5_res1.Rdata", sep=""))
+   
+ }
[1] "rep 1"
[1] "rep 2"
[1] "rep 3"
[1] "rep 4"
[1] "rep 5"
[1] "rep 6"
[1] "rep 7"
[1] "rep 8"
[1] "rep 9"
[1] "rep 10"
[1] "rep 11"
[1] "rep 12"
[1] "rep 13"
[1] "rep 14"
[1] "rep 15"
[1] "rep 16"
[1] "rep 17"
[1] "rep 18"
[1] "rep 19"
[1] "rep 20"
[1] "rep 21"
[1] "rep 22"
[1] "rep 23"
[1] "rep 24"
[1] "rep 25"
[1] "rep 26"
[1] "rep 27"
[1] "rep 28"
[1] "rep 29"
[1] "rep 30"
[1] "rep 31"
[1] "rep 32"
[1] "rep 33"
[1] "rep 34"
[1] "rep 35"
[1] "rep 36"
[1] "rep 37"
[1] "rep 38"
[1] "rep 39"
[1] "rep 40"
[1] "rep 41"
[1] "rep 42"
[1] "rep 43"
[1] "rep 44"
[1] "rep 45"
[1] "rep 46"
[1] "rep 47"
[1] "rep 48"
[1] "rep 49"
[1] "rep 50"
[1] "rep 51"
[1] "rep 52"
[1] "rep 53"
[1] "rep 54"
[1] "rep 55"
[1] "rep 56"
[1] "rep 57"
[1] "rep 58"
[1] "rep 59"
[1] "rep 60"
[1] "rep 61"
[1] "rep 62"
[1] "rep 63"
[1] "rep 64"
[1] "rep 65"
[1] "rep 66"
[1] "rep 67"
[1] "rep 68"
[1] "rep 69"
[1] "rep 70"
[1] "rep 71"
[1] "rep 72"
[1] "rep 73"
[1] "rep 74"
[1] "rep 75"
[1] "rep 76"
[1] "rep 77"
[1] "rep 78"
[1] "rep 79"
[1] "rep 80"
[1] "rep 81"
[1] "rep 82"
[1] "rep 83"
[1] "rep 84"
[1] "rep 85"
[1] "rep 86"
[1] "rep 87"
[1] "rep 88"
[1] "rep 89"
[1] "rep 90"
[1] "rep 91"
[1] "rep 92"
[1] "rep 93"
[1] "rep 94"
[1] "rep 95"
[1] "rep 96"
[1] "rep 97"
[1] "rep 98"
[1] "rep 99"
[1] "rep 100"
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
    user   system  elapsed 
69998.19   125.68 70130.90 
