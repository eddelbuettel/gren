
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### paths
> path.data <- ifelse(as.character(Sys.info()[1])!="Darwin", "~/EBEN/data/",
+                     "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/data/")
> path.code <- ifelse(as.character(Sys.info()[1])!="Darwin", "~/EBEN/code/",
+                     "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/code/")
> path.res <- ifelse(as.character(Sys.info()[1])!="Darwin", "~/EBEN/results/",
+                    "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/results/")
> path.graph <- "/Users/magnusmunch/Documents/OneDrive/PhD/EBEN/graphs/"
> 
> ### loading libraries
> library(GRridge)
Loading required package: penalized
Loading required package: survival
Welcome to penalized. For extended examples, see vignette("penalized").
Loading required package: Iso
Iso 0.0-17
Loading required package: GSEABase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:penalized’:

    as.data.frame

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: annotate
Loading required package: AnnotationDbi
Loading required package: stats4
Loading required package: IRanges
Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: XML
Loading required package: graph

Attaching package: ‘graph’

The following object is masked from ‘package:XML’:

    addNode

Warning messages:
1: replacing previous import ‘stats::xtabs’ by ‘BiocGenerics::xtabs’ when loading ‘GRridge’ 
2: replacing previous import ‘stats::sd’ by ‘BiocGenerics::sd’ when loading ‘GRridge’ 
3: replacing previous import ‘stats::mad’ by ‘BiocGenerics::mad’ when loading ‘GRridge’ 
4: replacing previous import ‘stats::IQR’ by ‘BiocGenerics::IQR’ when loading ‘GRridge’ 
5: replacing previous import ‘GSEABase::intersect’ by ‘BiocGenerics::intersect’ when loading ‘GRridge’ 
6: replacing previous import ‘penalized::as.data.frame’ by ‘BiocGenerics::as.data.frame’ when loading ‘GRridge’ 
7: replacing previous import ‘GSEABase::setdiff’ by ‘BiocGenerics::setdiff’ when loading ‘GRridge’ 
8: replacing previous import ‘stats::var’ by ‘BiocGenerics::var’ when loading ‘GRridge’ 
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

Loading required package: foreach
Loaded glmnet 2.0-13


Attaching package: ‘glmnet’

The following object is masked from ‘package:GRridge’:

    auc

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following object is masked from ‘package:glmnet’:

    auc

The following objects are masked from ‘package:GRridge’:

    auc, roc

The following objects are masked from ‘package:IRanges’:

    cov, var

The following objects are masked from ‘package:S4Vectors’:

    cov, var

The following object is masked from ‘package:BiocGenerics’:

    var

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> 
> ### load functions
> source(paste(path.code, "grVBEM.R", sep=""))
> 
> ### load data
> load(paste(path.data, "forMagnus.Rdata", sep=""))
> 
> ### data manipulation
> n <- length(resp)
> p <- nrow(mirnormcen_resp)
> unpenal <- model.matrix(~ adjth + thscheme + age + pcrcdiff, data=datfr)[, -1]
> u <- ncol(unpenal)
> 
> ### create partitioning
> part.grridge <- list(TS=CreatePartition(as.character(which(!is.na(whichin))),
+                                         as.character(1:p)))
[1] "Summary of group sizes:"
 VarIn VarOut 
   221   1893 
> part.greben <- list(TS=rep(c(1, 2), times=unlist(lapply(partkeep$TS, length)))[
+   order(unlist(partkeep$TS))])
> 
> ### fitting models
> # fit1.ridge <- cv.glmnet(t(mirnormcen_resp), resp, alpha=0, standardize=FALSE,
> #                         family="binomial", intercept=TRUE)
> # fit1.lasso <- cv.glmnet(t(mirnormcen_resp), resp, alpha=1, standardize=FALSE,
> #                         family="binomial", intercept=TRUE)
> # fit1.grridge <- grridge(mirnormcen_resp, resp, part.grridge, optl=NULL, 
> #                         unpenal = ~1 + adjth + thscheme + age + pcrcdiff, 
> #                         niter=1, method="exact", dataunpen = datfr, innfold=10,
> #                         savepredobj="all", comparelasso=FALSE, optllasso=NULL,
> #                         compareunpenal=TRUE, selectionEN=TRUE, maxsel=25) 
> # fit1.greben <- grEBEN3(t(mirnormcen_resp), as.numeric(resp) - 1, 
> #                        rep(1, length(resp)), unpenalized=unpenal, 
> #                        partitions=part.greben, alpha=0.05, psel=25, nfolds=NULL, 
> #                        posterior=FALSE, ELBO=FALSE, eps=0.001, maxiter=500, 
> #                        trace=TRUE)
> # fit2.greben <- grEBEN3(t(mirnormcen_resp), as.numeric(resp) - 1, 
> #                        rep(1, length(resp)), unpenalized=unpenal, 
> #                        partitions=part.greben, alpha=0.5, psel=25, nfolds=NULL, 
> #                        posterior=FALSE, ELBO=FALSE, eps=0.001, maxiter=500, 
> #                        trace=TRUE)
> # fit3.greben <- grEBEN3(t(mirnormcen_resp), as.numeric(resp) - 1, 
> #                        rep(1, length(resp)), unpenalized=unpenal, 
> #                        partitions=part.greben, alpha=0.95, psel=25, nfolds=NULL, 
> #                        posterior=FALSE, ELBO=FALSE, eps=0.001, maxiter=500, 
> #                        trace=TRUE)
> 
> 
> ### cross validation
> set.seed(2018)
> nfolds <- 10
> rest <- n %% nfolds
> foldid <- sample(rep(1:nfolds, times=round(c(rep(
+   n %/% nfolds + as.numeric(rest!=0), times=rest), 
+   rep(n %/% nfolds, times=nfolds - rest)))))
> 
> pred <- matrix(NA, ncol=9, nrow=n)
> colnames(pred) <- c("lasso", "ridge", "enet1", "enet2", "enet3", "greben1", 
+                     "greben2", "greben3", "grridge")
> for(k in sort(unique(foldid))) {
+   cat(paste("Fold ", k, "\n"))
+   
+   xtrain <- t(mirnormcen_resp)[foldid!=k, ]
+   xtest <- t(mirnormcen_resp)[foldid==k, ]
+   ytrain <- (as.numeric(resp) - 1)[foldid!=k]
+   utrain1 <- datfr[foldid!=k, ]
+   utest1 <- datfr[foldid==k, ]
+   utrain2 <- unpenal[foldid!=k, ]
+   utest2 <- unpenal[foldid==k, ]
+   
+   cv.ridge <- cv.glmnet(cbind(utrain2, xtrain), ytrain, alpha=0, 
+                         standardize=FALSE,family="binomial", intercept=TRUE,
+                         penalty.factor=c(rep(0, u), rep(1, p)))
+   cv.lasso <- cv.glmnet(cbind(utrain2, xtrain), ytrain, alpha=1, 
+                         standardize=FALSE, family="binomial", intercept=TRUE,
+                         penalty.factor=c(rep(0, u), rep(1, p)))
+   cv.grridge <- grridge(t(xtrain), ytrain, part.grridge, optl=NULL, trace=FALSE,
+                         unpenal = ~1 + adjth + thscheme + age + pcrcdiff, 
+                         niter=1, method="exact", dataunpen=utrain1, innfold=10,
+                         savepredobj="all", comparelasso=FALSE, optllasso=NULL,
+                         compareunpenal=TRUE, selectionEN=TRUE, maxsel=25) 
+   cv1.greben <- grEBEN3(xtrain, ytrain, rep(1, length(ytrain)), 
+                         unpenalized=utrain2, partitions=part.greben, alpha=0.05, 
+                         psel=25, nfolds=10, trace=FALSE)
+   cv2.greben <- grEBEN3(xtrain, ytrain, rep(1, length(ytrain)), 
+                         unpenalized=utrain2, partitions=part.greben, alpha=0.5, 
+                         psel=25, nfolds=10, trace=FALSE)
+   cv3.greben <- grEBEN3(xtrain, ytrain, rep(1, length(ytrain)), 
+                         unpenalized=utrain2, partitions=part.greben, alpha=0.95, 
+                         psel=25, nfolds=10, trace=FALSE)
+   
+   pred[foldid==k, 1] <- as.numeric(predict(
+     cv.lasso, cbind(utest2, xtest), type="response", 
+     s=cv.lasso$lambda[min(which((cv.lasso$nzero - u) >= 25))]))
+   pred[foldid==k, 2] <- as.numeric(predict(
+     cv.ridge, cbind(utest2, xtest), type="response", s="lambda.min"))
+   est <- cv1.greben$beta.nogroups[, min(which(colSums(
+     cv1.greben$beta.nogroups[-c(1:(u + 1)), ]!=0) >= 25))]
+   pred[foldid==k, 3] <- as.numeric(exp(cbind(1, utest2, xtest) %*% est)/(
+     1 + exp(cbind(1, utest2, xtest) %*% est)))
+   est <- cv2.greben$beta.nogroups[, min(which(colSums(
+     cv2.greben$beta.nogroups[-c(1:(u + 1)), ]!=0) >= 25))]
+   pred[foldid==k, 4] <- as.numeric(exp(cbind(1, utest2, xtest) %*% est)/(
+     1 + exp(cbind(1, utest2, xtest) %*% est)))
+   est <- cv3.greben$beta.nogroups[, min(which(colSums(
+     cv3.greben$beta.nogroups[-c(1:(u + 1)), ]!=0) >= 25))]
+   pred[foldid==k, 5] <- as.numeric(exp(cbind(1, utest2, xtest) %*% est)/(
+     1 + exp(cbind(1, utest2, xtest) %*% est)))
+   est <- cv1.greben$beta[, min(which(colSums(
+     cv1.greben$beta[-c(1:(u + 1)), ]!=0) >= 25))]
+   pred[foldid==k, 6] <- as.numeric(exp(cbind(1, utest2, xtest) %*% est)/(
+     1 + exp(cbind(1, utest2, xtest) %*% est)))
+   est <- cv2.greben$beta[, min(which(colSums(
+     cv2.greben$beta[-c(1:(u + 1)), ]!=0) >= 25))]
+   pred[foldid==k, 7] <- as.numeric(exp(cbind(1, utest2, xtest) %*% est)/(
+     1 + exp(cbind(1, utest2, xtest) %*% est)))
+   est <- cv3.greben$beta[, min(which(colSums(
+     cv3.greben$beta[-c(1:(u + 1)), ]!=0) >= 25))]
+   pred[foldid==k, 8] <- as.numeric(exp(cbind(1, utest2, xtest) %*% est)/(
+     1 + exp(cbind(1, utest2, xtest) %*% est)))
+   est <- replace(rep(0, p + u + 1), 
+                  c(1:(u + 1), cv.grridge$resEN$whichEN + u + 1),
+                  coef(cv.grridge$predobj$modelunpen))
+   pred[foldid==k, 9] <- as.numeric(exp(cbind(1, utest2, xtest) %*% est)/(
+     1 + exp(cbind(1, utest2, xtest) %*% est)))
+   
+ }
Fold  1 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -44.60103
[1] "Computation time for cross-validating main penalty parameter: 7.106"
[1] "lambda2 754.054658445498"
12345
[1] -44.60103
[1] -44.60103
[1] "Relative error: 0.0515928737061108"
[1] "Shrink Factor coefficient matrix 0.525"
[1] "exact"
[1] 0.1306939 4.4749054
[1] -39.42791
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 2.07700000000001"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1306939 4.4749054 

[1] "CVLs -44.6010287211375" "CVLs -39.4279077801702"
[1] "Total computation time: 10.328"
Fold  2 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -48.30345
[1] "Computation time for cross-validating main penalty parameter: 7.01800000000003"
[1] "lambda2 569.312897098603"
12345
[1] -48.30345
[1] -48.30345
[1] "Relative error: 0.0517865196316875"
[1] "Shrink Factor coefficient matrix 0.525"
[1] "exact"
[1] 0.1306976 4.4743985
[1] -42.60781
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.52099999999996"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1306976 4.4743985 

[1] "CVLs -48.3034540703543" "CVLs -42.6078053842519"
[1] "Total computation time: 9.76400000000012"
Fold  3 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -52.28159
[1] "Computation time for cross-validating main penalty parameter: 6.63900000000012"
[1] "lambda2 735.196112148386"
12345
[1] -52.28159
[1] -52.28159
[1] "Relative error: 0.0522374795993049"
[1] "Shrink Factor coefficient matrix 0.53"
[1] "exact"
[1] 0.1306926 4.4750776
[1] -47.53533
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.51099999999997"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1306926 4.4750776 

[1] "CVLs -52.2815863087683" "CVLs -47.5353262306726"
[1] "Total computation time: 9.49400000000014"
Fold  4 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -45.04627
[1] "Computation time for cross-validating main penalty parameter: 6.29200000000037"
[1] "lambda2 550.392248388466"
12345
[1] -45.04627
[1] -45.04627
[1] "Relative error: 0.0520904104495666"
[1] "Shrink Factor coefficient matrix 0.53"
[1] "exact"
[1] 0.1306917 4.4752044
[1] -39.64023
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.54599999999937"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1306917 4.4752044 

[1] "CVLs -45.04626804724"   "CVLs -39.6402288094019"
[1] "Total computation time: 9.10000000000036"
Fold  5 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -48.55646
[1] "Computation time for cross-validating main penalty parameter: 6.85000000000036"
[1] "lambda2 486.210724233346"
12345
[1] -48.55646
[1] -48.55646
[1] "Relative error: 0.0574604738250102"
[1] "Shrink Factor coefficient matrix 0.585"
[1] "exact"
[1] 0.1319749 4.3077693
[1] -41.47449
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.54399999999987"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1319749 4.3077693 

[1] "CVLs -48.556457904308"  "CVLs -41.4744863200036"
[1] "Total computation time: 9.6190000000006"
Fold  6 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -49.94879
[1] "Computation time for cross-validating main penalty parameter: 6.56600000000071"
[1] "lambda2 526.571224708735"
12345
[1] -49.94879
[1] -49.94879
[1] "Relative error: 0.0565535801464006"
[1] "Shrink Factor coefficient matrix 0.575"
[1] "exact"
[1] 0.1317612 4.3345477
[1] -43.52426
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.82999999999993"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1317612 4.3345477 

[1] "CVLs -49.9487922364118" "CVLs -43.5242611718954"
[1] "Total computation time: 9.41200000000026"
Fold  7 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -49.60182
[1] "Computation time for cross-validating main penalty parameter: 8.04800000000068"
[1] "lambda2 674.297882393824"
12345
[1] -49.60182
[1] -49.60182
[1] "Relative error: 0.0514249852348258"
[1] "Shrink Factor coefficient matrix 0.525"
[1] "exact"
[1] 0.1305036 4.5011366
[1] -43.0761
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.55199999999968"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1305036 4.5011366 

[1] "CVLs -49.6018161428823" "CVLs -43.0760991583041"
[1] "Total computation time: 10.9140000000007"
Fold  8 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -49.41871
[1] "Computation time for cross-validating main penalty parameter: 6.32699999999932"
[1] "lambda2 882.436379767228"
1234
[1] -49.41871
[1] -49.41871
[1] "Relative error: 0.0525721215671185"
[1] "Shrink Factor coefficient matrix 0.535"
[1] "exact"
[1] 0.1307665 4.4649911
[1] -45.93958
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.54700000000048"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1307665 4.4649911 

[1] "CVLs -49.4187061432086" "CVLs -45.9395761947342"
[1] "Total computation time: 9.03199999999924"
Fold  9 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -45.92988
[1] "Computation time for cross-validating main penalty parameter: 6.97400000000016"
[1] "lambda2 446.45126506463"
12345
[1] -45.92988
[1] -45.92988
[1] "Relative error: 0.0551776595236311"
[1] "Shrink Factor coefficient matrix 0.56"
[1] "exact"
[1] 0.1463654 3.1336868
[1] -42.27294
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.54800000000068"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1463654 3.1336868 

[1] "CVLs -45.9298824595715" "CVLs -42.2729359920708"
[1] "Total computation time: 9.51400000000103"
Fold  10 
[1] "Grouping 1 contains mutually exclusive groups"
[1] "Binary response, executing logistic ridge regression"
[1] "Finding lambda for initial ridge regression"
[1] -46.76601
[1] "Computation time for cross-validating main penalty parameter: 6.95500000000175"
[1] "lambda2 441.242974921876"
12345
[1] -46.76601
[1] -46.76601
[1] "Relative error: 0.0581424494458081"
[1] "Shrink Factor coefficient matrix 0.59"
[1] "exact"
[1] 0.1320561 4.2976968
[1] -40.16112
12345
[1] "Partition TS improved results"
[1] "Computation time for adaptive weigthing: 1.55000000000109"
[1] "Starting unpenalized glm"
[1] "Final lambda multipliers (summary):"
$TS
    VarIn    VarOut 
0.1320561 4.2976968 

[1] "CVLs -46.7660128585553" "CVLs -40.1611164222695"
[1] "Total computation time: 9.63400000000001"
> 
> results1 <- list(pred=pred)
> save(results1, file=paste(path.res, "grEBEN_mirseq_Maarten_res1.Rdata", sep=""))
> 
> # sum(rle(sort(part.greben$TS))$lengths*log(
> #   fit1.greben$lambdag$TS[, fit1.greben$nouteriter + 1]))
> # sum(rle(sort(part.greben$TS))$lengths*log(
> #   fit2.greben$lambdag$TS[, fit2.greben$nouteriter + 1]))
> # sum(rle(sort(part.greben$TS))$lengths*log(
> #   fit3.greben$lambdag$TS[, fit3.greben$nouteriter + 1]))
> # sum(rle(sort(part.greben$TS))$lengths*log(grMaartenAll$lambdamults$TS))
> # 
> # 
> # plot(coef(fit1.grridge$predobj$GroupRegul)[-c(1:6)],
> #      fit1.greben$beta[-c(1:6), which(fit1.greben$lambda==fit1.greben$lambda.min)])
> # 
> # 
> # bsel1.enet <- fit1.greben$beta.nogroups[-c(1:6), colSums(
> #   fit1.greben$beta.nogroups[-c(1:6), ]!=0)==27]
> # bsel1.greben <- fit1.greben$beta[-c(1:6), colSums(fit1.greben$beta[-c(1:6), ]!=0)==25]
> # bsel1.grridge <- replace(rep(0, p), fit1.grridge$resEN$whichEN, 
> #                         coef(fit1.grridge$predobj$modelunpen, "penalized"))
> # bsel2.enet <- fit2.greben$beta.nogroups[-c(1:6), colSums(
> #   fit2.greben$beta.nogroups[-c(1:6), ]!=0)==25]
> # bsel2.greben <- fit2.greben$beta[-c(1:6), colSums(fit2.greben$beta[-c(1:6), ]!=0)==25]
> # bsel3.enet <- fit3.greben$beta.nogroups[-c(1:6), colSums(
> #   fit3.greben$beta.nogroups[-c(1:6), ]!=0)==26]
> # bsel3.greben <- fit3.greben$beta[-c(1:6), colSums(fit3.greben$beta[-c(1:6), ]!=0)==25]
> # 
> # 
> # 
> # pairs(cbind(bsel1.grridge, bsel1.greben, bsel2.greben, bsel3.greben))
> # 
> # 
> # 
> # cbind(which(bsel1.grridge!=0), which(bsel1.greben!=0), which(bsel2.greben!=0))
> # which(bsel1.enet!=0)
> # 
> # 
> # which(bsel2.greben!=0)
> # which(bsel2.enet!=0)
> # intersect(which(bsel1.grridge!=0), which(bsel1.grridge!=0))
> # 
> # cbind(bsel1.grridge, bsel1.greben, bsel2.greben)
> 
> 
> 
> 
> 
> 
> 
> proc.time()
     user    system   elapsed 
16121.944     7.824 16130.519 
